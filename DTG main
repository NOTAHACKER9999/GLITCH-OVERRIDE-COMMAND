<!DOCTYPE html>
<html>
<head>
<title>DARE TO GAME 2</title>
<style>
body {
  background-color: black;
  color: white;
  font-family: sans-serif;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0;
  padding: 0;
  height: 100vh;
  overflow: hidden;
}

#matrix-canvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  display: none;
}

.title {
  font-size: 2em;
  color: red;
  text-shadow: 0 0 10px red;
  animation: glow 2s infinite alternate;
  margin-bottom: 10px;
  cursor: pointer;
}

@keyframes glow {
  from {
    text-shadow: 0 0 5px red;
  }
  to {
    text-shadow: 0 0 15px red;
  }
}

.subtitle {
  font-family: monospace;
  font-size: 0.8em;
  margin-bottom: 20px;
  color: #aaa;
  cursor: pointer;
}

.button-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 1.5in;
}


.button {
  width: 1.5in;
  height: 0.5in;
  background-color: black;
  color: red;
  border: 1px solid red;
  margin-bottom: 5px;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 1em;
  box-sizing: border-box;
  text-decoration: none;
}

/* Common styles for Discord and Github Buttons */
.social-button {
  width: 1.5in;
  height: 0.5in;
  background-color: black;
  color: red;
  border: 1px solid red;
  margin-bottom: 5px;
  cursor: pointer;
  display: flex;
  align-items: center;
  font-size: 1em;
  box-sizing: border-box;
  padding-left: 0;
  text-decoration: none;
  justify-content: center;
}


.discord-button img {
  width: 0.5in;
  height: 0.5in;
  object-fit: cover;
  margin-right: 5px;
}

.github-button img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  margin-right: 5px;
}

/* Optional: Hover effects */
.button:hover, .social-button:hover {
  opacity: 0.8;
}
</style>
</head>
<body>

  <canvas id="matrix-canvas"></canvas>

  <div class="title">DARE TO GAME 2</div>
  <div class="subtitle">By GLITCHED OVERRIDE</div>

  <div class="button-container">
      <button class="button">GAMES</button>
      <button class="button">YOUTUBE</button>
      <button class="button">MUSIC</button>
      <button class="button">WEB USER</button>
      <button class="button">CUSTOMIZERS</button>

      <a href="https://discord.gg/QRyjNnkMev" target="_blank">
          <button class="social-button discord-button">
              <img src="https://s.widget-club.com/samples/kM1hq0oIcGaRfOfdnXJquPxfLD62/NRn3gtTLNH5O64EjwQ6J/DAB71DDF-E7B0-455E-9E9E-7B17047409A8.jpg?q=70" alt="Discord Icon">
              <span>DISCORD</span>
          </button>
      </a>

      <a href="https://github.com/NOTAHACKER9999/Dare-To-Game" target="_blank">
          <button class="social-button github-button">
              <img src="https://images.icon-icons.com/3685/PNG/512/github_logo_icon_229278.png" alt="GitHub Logo">
          </button>
      </a>
  </div>

<script>
  const canvas = document.getElementById('matrix-canvas');
  const ctx = canvas.getContext('2d');
  const subtitle = document.querySelector('.subtitle');
  const title = document.querySelector('.title'); // Select the title
  let matrixEffectEnabled = false;

  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  const fontSize = 16;
  const columns = canvas.width / fontSize;

  const drops = [];
  for (let x = 0; x < columns; x++) {
    drops[x] = 1;
  }

  function draw() {
    if (!matrixEffectEnabled) return;

    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    ctx.fillStyle = currentColor; // Use the current color
    ctx.font = fontSize + 'px monospace';

    for (let i = 0; i < drops.length; i++) {
      const text = characters.charAt(Math.floor(Math.random() * characters.length));
      ctx.fillText(text, i * fontSize, drops[i] * fontSize);

      if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
        drops[i] = 0;
      }

      drops[i]++;
    }
  }

  let intervalId = null;

  function startMatrixEffect() {
      canvas.style.display = 'block';
      intervalId = setInterval(draw, 33);
  }

  function stopMatrixEffect() {
    canvas.style.display = 'none';
    clearInterval(intervalId);
    intervalId = null;
  }

  subtitle.addEventListener('click', function() {
      matrixEffectEnabled = !matrixEffectEnabled;
      if (matrixEffectEnabled) {
          startMatrixEffect();
      } else {
          stopMatrixEffect();
      }
  });

  const rainbowColors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];
  let colorIndex = 0;
  let currentColor = 'red';

  title.addEventListener('click', function() {
    if (matrixEffectEnabled) {
      colorIndex = (colorIndex + 1) % rainbowColors.length;
      currentColor = rainbowColors[colorIndex];
    }
  });

  window.addEventListener('resize', function() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  });
</script>

</body>
</html>
